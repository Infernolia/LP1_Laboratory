//Binary search

#include <iostream>
#include <chrono>
#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;

int binarySearch(int arr[], int l, int r, int x)
{
    while (l <= r) {
        int m = l + (r - l) / 2;
  
        // Check if x is present at mid
        if (arr[m] == x)
            return m;
  
        // If x greater, ignore left half
        if (arr[m] < x)
            l = m + 1;
  
        // If x is smaller, ignore right half
        else
            r = m - 1;
    }
  
    // if we reach here, then element was
    // not present
    return -1;
}

// Function to print an array
void printArray(int A[], int size)
{
    for (auto i = 0; i < size; i++)
        cout << A[i] << " ";
}
  

int main()
{
    auto arr_size = 10000;
	int arr[arr_size];
	int t = 5;
	for(int i=0;i<arr_size;i++)
	{
		arr[i]=t*i;
	}
	
	cout << "Given array is \n";
    printArray(arr, arr_size);
    auto start = high_resolution_clock::now();
    int x = 500;
    int result = binarySearch(arr, 0, arr_size - 1, x);
    auto stop = high_resolution_clock::now();
    (result == -1) ? cout << "\nElement is not present in array"
                   : cout << "\nElement is present at index " << result;
                   
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "\nTiming is " << duration.count()/1000.0 << " milliseconds"<< endl;
    return 0;

}







//        Best First Search


#include <iostream>
#include <chrono>
#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;

#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pi;
  
vector<vector<pi> > graph;
  
// Function for adding edges to graph
void addedge(int x, int y, int cost)
{
    graph[x].push_back(make_pair(cost, y));
    graph[y].push_back(make_pair(cost, x));
}
  
// Function For Implementing Best First Search
// Gives output path having lowest cost
void best_first_search(int source, int target, int n)
{
    vector<bool> visited(n, false);
    // MIN HEAP priority queue
    priority_queue<pi, vector<pi>, greater<pi> > pq;
    // sorting in pq gets done by first value of pair
    pq.push(make_pair(0, source));
    int s = source;
    visited[s] = true;
    while (!pq.empty()) {
        int x = pq.top().second;
        // Displaying the path having lowest cost
        cout << x << " ";
        pq.pop();
        if (x == target)
            break;
  
        for (int i = 0; i < graph[x].size(); i++) {
            if (!visited[graph[x][i].second]) {
                visited[graph[x][i].second] = true;
                pq.push(make_pair(graph[x][i].first,graph[x][i].second));
            }
        }
    }
}
  
// Driver code to test above methods
int main()
{
    // No. of Nodes
    auto v = 14;
    graph.resize(v);
  
   
	addedge(0, 1, 3);
    addedge(0, 2, 6);
    addedge(0, 3, 5);
    addedge(1, 4, 9);
    addedge(1, 5, 8);
    addedge(2, 6, 12);
    addedge(2, 7, 14);
    addedge(3, 8, 7);
    addedge(8, 9, 5);
    addedge(8, 10, 6);
    addedge(9, 11, 1);
    addedge(9, 12, 10);
    addedge(9, 13, 2);

  
    int source = 0;
    int target = 9;
  
    auto start = high_resolution_clock::now();
    best_first_search(source, target, v);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
  cout << "\nTiming is " << duration.count()/1000.0 << " milliseconds"<< endl;
    return 0;
}

