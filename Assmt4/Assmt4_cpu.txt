//Merge Sort





#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

 
// Merges two subarrays of array[].
// First subarray is arr[begin..mid]
// Second subarray is arr[mid+1..end]
void merge(int array[], int const left, int const mid, int const right)
{
    auto const subArrayOne = mid - left + 1;
    auto const subArrayTwo = right - mid;
 
    // Create temp arrays
    auto *leftArray = new int[subArrayOne],
         *rightArray = new int[subArrayTwo];
 
    // Copy data to temp arrays leftArray[] and rightArray[]
    for (auto i = 0; i < subArrayOne; i++)
        leftArray[i] = array[left + i];
    for (auto j = 0; j < subArrayTwo; j++)
        rightArray[j] = array[mid + 1 + j];
 
    auto indexOfSubArrayOne = 0, // Initial index of first sub-array
        indexOfSubArrayTwo = 0; // Initial index of second sub-array
    int indexOfMergedArray = left; // Initial index of merged array
 
    // Merge the temp arrays back into array[left..right]
    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo) {
        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo]) {
            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
            indexOfSubArrayOne++;
        }
        else {
            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
            indexOfSubArrayTwo++;
        }
        indexOfMergedArray++;
    }
    // Copy the remaining elements of
    // left[], if there are any
    while (indexOfSubArrayOne < subArrayOne) {
        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
        indexOfSubArrayOne++;
        indexOfMergedArray++;
    }
    // Copy the remaining elements of
    // right[], if there are any
    while (indexOfSubArrayTwo < subArrayTwo) {
        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
        indexOfSubArrayTwo++;
        indexOfMergedArray++;
    }
}
 
// begin is for left index and end is
// right index of the sub-array
// of arr to be sorted */
void mergeSort(int array[], int const begin, int const end)
{
    if (begin >= end)
        return; // Returns recursivly
 
    auto mid = begin + (end - begin) / 2;
    mergeSort(array, begin, mid);
    mergeSort(array, mid + 1, end);
    merge(array, begin, mid, end);
}
 
// UTILITY FUNCTIONS
// Function to print an array
void printArray(int A[], int size)
{
    for (auto i = 0; i < size; i++)
        cout << A[i] << " ";
}
 
// Driver code
int main()
{
    
    auto arr_size = 1000;
	int arr[arr_size];
	for(int i=0;i<arr_size;i++)
	{
		arr[i]=rand()%10000;
	}
 
    cout << "Given array is \n";
    printArray(arr, arr_size);
    auto start = high_resolution_clock::now();
    mergeSort(arr, 0, arr_size - 1);
    auto stop = high_resolution_clock::now();
    cout << "\nSorted array is \n";
    printArray(arr, arr_size);
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "\nTiming is " << duration.count()/1000.0 << " milliseconds"<< endl;
    
    return 0;
}













------------------------------------------------------

-----------------------------------------------------


//Bubble sort


#include <bits/stdc++.h>
using namespace std;
#include <chrono>
using namespace std::chrono;
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
 
// A function to implement bubble sort
void bubbleSort(int arr[], int n)
{
    int i, j;
    for (i = 0; i < n-1; i++)    
     
    // Last i elements are already in place
    for (j = 0; j < n-i-1; j++)
        if (arr[j] > arr[j+1])
            swap(&arr[j], &arr[j+1]);
}
 
/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}
 
// Driver code
int main()
{
     auto arr_size = 1000;
	int arr[arr_size];
	for(int i=0;i<arr_size;i++)
	{
		arr[i]=rand()%10000;
	}
	
	 auto start = high_resolution_clock::now();
 
    bubbleSort(arr, arr_size);
    auto stop = high_resolution_clock::now();
    
    cout<<"Sorted array: \n";
    printArray(arr, arr_size);
    
      auto duration = duration_cast<microseconds>(stop - start);
    cout << "\nTiming is " << duration.count()/1000.0 << " milliseconds"<< endl;
  
    return 0;
}








-------------------------------------------